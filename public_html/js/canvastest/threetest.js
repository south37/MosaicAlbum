// Generated by CoffeeScript 1.6.3
$(function() {
  console.log("load threetest.coffee");
  return window.addEventListener("DOMContentLoaded", function() {
    var anim, aspect, camera, col, controlMode, directioalLight, far, fov, geometry, height, i, j, materials, near, path, pathList, pclientX, pclientY, piece, render, row, scene, sizeX, sizeY, target, tex, texlist, trans, width, _i, _j;
    width = window.innerWidth;
    height = window.innerHeight;
    render = new THREE.WebGLRenderer();
    render.setSize(width, height);
    $("#container").before(render.domElement);
    render.setClearColor(0x000000, 1);
    scene = new THREE.Scene();
    fov = 80;
    aspect = width / height;
    near = 1;
    far = 10000;
    camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
    target = new THREE.Vector3(0, 0, 0);
    camera.position.set(0, 0, 500);
    scene.add(camera);
    camera.lookAt(target);
    directioalLight = new THREE.DirectionalLight(0xffffff, 3);
    directioalLight.position.z = 300;
    scene.add(directioalLight);
    pathList = ["resize_0.png", "resize_1.png", "resize_2.png", "resize_3.png", "resize_4.png", "resize_5.png", "resize_6.png", "resize_7.png", "resize_8.png", "resize_9.jpg"];
    texlist = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = pathList.length; _i < _len; _i++) {
        path = pathList[_i];
        _results.push(new THREE.ImageUtils.loadTexture('/img/resize_img/' + path));
      }
      return _results;
    })();
    materials = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = texlist.length; _i < _len; _i++) {
        tex = texlist[_i];
        _results.push(new THREE.MeshBasicMaterial({
          map: tex
        }));
      }
      return _results;
    })();
    row = 80;
    col = 60;
    sizeX = 1000 / col;
    sizeY = 1000 / row;
    geometry = new THREE.PlaneGeometry(sizeX, sizeY, 1, 1);
    for (i = _i = 0; 0 <= col ? _i <= col : _i >= col; i = 0 <= col ? ++_i : --_i) {
      for (j = _j = 0; 0 <= row ? _j <= row : _j >= row; j = 0 <= row ? ++_j : --_j) {
        piece = new THREE.Mesh(geometry, materials[(i + j) % 10]);
        piece.position.set(sizeX * i - 500, sizeY * j - 500, -10);
        scene.add(piece);
      }
    }
    controlMode = "none";
    pclientX = 0;
    pclientY = 0;
    $('canvas').mousedown(function(e) {
      console.log("mousedown:", e);
      return controlMode = "move";
    });
    $('canvas').mouseup(function() {
      console.log("mouseup");
      return controlMode = "none";
    });
    $('canvas').mousemove(function(e) {
      var diff;
      switch (controlMode) {
        case "move":
          diff = new THREE.Vector3(-e.clientX + pclientX, e.clientY - pclientY, 0);
          camera.position.add(diff);
          break;
        case "zoom":
          diff = new THREE.Vector3(0, 0, e.clientY - pclientY);
          camera.position.add(diff);
          break;
        case "target":
          diff = new THREE.Vector3(-e.clientX + pclientX, e.clientY - pclientY, 0);
          target.add(diff);
          camera.lookAt(target);
          break;
        case "reset":
          camera.position.set(0, 0, 500);
          target.set(0, 0, 0);
          camera.lookAt(target);
          controlMode = "none";
          break;
        case "none":
          console.log("none");
      }
      pclientX = e.clientX;
      return pclientY = e.clientY;
    });
    $(this).keypress(function(e) {
      console.log(e.which);
      switch (e.which) {
        case 113:
          return controlMode = controlMode === "move" ? "none" : "move";
        case 119:
          return controlMode = controlMode === "zoom" ? "none" : "zoom";
        case 101:
          return controlMode = controlMode === "target" ? "none" : "target";
        case 97:
          return controlMode = "reset";
        default:
          return controlMode = "none";
      }
    });
    trans = function(object, target, duration) {
      return new TWEEN.Tween(object.position).to({
        x: target.x,
        y: target.y,
        z: target.z
      }, duration).easing(TWEEN.Easing.Elastic.InOut).start();
    };
    anim = function() {
      requestAnimationFrame(anim);
      TWEEN.update();
      return render.render(scene, camera);
    };
    render.render(scene, camera);
    return anim();
  });
});
